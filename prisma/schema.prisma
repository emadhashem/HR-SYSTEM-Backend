// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum GroupType {
  HR
  Normal_Employee
}

enum AttendanceStatus {
  Present
  Absent
  Late
}

enum EmployeeStatus {
  Active
  Inactive
  OnLeave
  Suspended
  Probation
}

enum PayFrequency {
  Monthly
  BiWeekly
  Weekly
  Quarterly
  Annually
}

model Employee {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  passwordHash   String?        @map("password_hash")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  groupType      GroupType      @default(Normal_Employee) @map("group_type")
  Attendance     Attendance[]
  department     Department?    @relation(fields: [departmentId], references: [id])
  departmentId   Int?           @map("department_id")
  employeeStatus EmployeeStatus @default(Active) @map("employee_status")
  salaryHistory  Salary[]
}

model Attendance {
  id         Int              @id @default(autoincrement())
  employee   Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int
  date       String
  status     AttendanceStatus
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  @@unique([employeeId, date])
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

model Salary {
  id            Int          @id @default(autoincrement())
  amount        Decimal
  payFrequency  PayFrequency @default(Monthly) @map("pay_frequency")
  effectiveDate DateTime     @map("effective_date")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  employeeId    Int          @map("employee_id")
  Employee      Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}
